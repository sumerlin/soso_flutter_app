// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:flutter_app/model/HomeModel.dart';
import 'package:flutter_app/model/LoginParams.dart';
import 'package:flutter_app/model/UserEntity.dart';
import 'package:flutter_app/model/category_entity.dart';
import 'package:flutter_app/model/category_model_entity.dart';
import 'package:flutter_app/module_video/model_video/category_filter_entity.dart';
import 'package:flutter_app/module_video/model_video/category_list_entity.dart';
import 'package:flutter_app/module_video/model_video/good_look_entity.dart';
import 'package:flutter_app/module_video/model_video/index_info_entity.dart';
import 'package:flutter_app/module_video/model_video/index_response_entity.dart';

JsonConvert jsonConvert = JsonConvert();
typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);

class JsonConvert {
	static final Map<String, JsonConvertFunction> convertFuncMap = {
		(HomeModel).toString(): HomeModel.fromJson,
		(Banner).toString(): Banner.fromJson,
		(Category).toString(): Category.fromJson,
		(Product).toString(): Product.fromJson,
		(LoginParams).toString(): LoginParams.fromJson,
		(UserEntity).toString(): UserEntity.fromJson,
		(CategoryEntity).toString(): CategoryEntity.fromJson,
		(CategoryData).toString(): CategoryData.fromJson,
		(CategoryModelEntity).toString(): CategoryModelEntity.fromJson,
		(CategoryModelData).toString(): CategoryModelData.fromJson,
		(CategoryFilterEntity).toString(): CategoryFilterEntity.fromJson,
		(CategoryFilterData).toString(): CategoryFilterData.fromJson,
		(CategoryFilterDataDramaFilterItemList).toString(): CategoryFilterDataDramaFilterItemList.fromJson,
		(CategoryListEntity).toString(): CategoryListEntity.fromJson,
		(CategoryListData).toString(): CategoryListData.fromJson,
		(GoodLookEntity).toString(): GoodLookEntity.fromJson,
		(GoodLookData).toString(): GoodLookData.fromJson,
		(GoodLookDataResponse).toString(): GoodLookDataResponse.fromJson,
		(GoodLookDataResponsePageData).toString(): GoodLookDataResponsePageData.fromJson,
		(IndexInfoEntity).toString(): IndexInfoEntity.fromJson,
		(IndexInfoData).toString(): IndexInfoData.fromJson,
		(IndexInfoDataDrama).toString(): IndexInfoDataDrama.fromJson,
		(IndexInfoDataEpisodeList).toString(): IndexInfoDataEpisodeList.fromJson,
		(IndexInfoDataPlayInfo).toString(): IndexInfoDataPlayInfo.fromJson,
		(IndexInfoDataQualityList).toString(): IndexInfoDataQualityList.fromJson,
		(IndexResponseEntity).toString(): IndexResponseEntity.fromJson,
		(IndexResponseData).toString(): IndexResponseData.fromJson,
		(IndexResponseDataTop).toString(): IndexResponseDataTop.fromJson,
		(IndexResponseDataTopEye).toString(): IndexResponseDataTopEye.fromJson,
		(IndexResponseDataTopGuide).toString(): IndexResponseDataTopGuide.fromJson,
		(IndexResponseDataSections).toString(): IndexResponseDataSections.fromJson,
		(IndexResponseDataSectionsSectionContents).toString(): IndexResponseDataSectionsSectionContents.fromJson,
	};

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e,enumConvert: enumConvert)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

List<T>? convertListNotNull<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => _asT<T>(e,enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        return convertFuncMap[type]!(Map<String, dynamic>.from(value)) as T;
      } else {
        throw UnimplementedError('$type unimplemented');
      }
    }
  }

	//list is returned by type
	static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
		if(<HomeModel>[] is M){
			return data.map<HomeModel>((Map<String, dynamic> e) => HomeModel.fromJson(e)).toList() as M;
		}
		if(<Banner>[] is M){
			return data.map<Banner>((Map<String, dynamic> e) => Banner.fromJson(e)).toList() as M;
		}
		if(<Category>[] is M){
			return data.map<Category>((Map<String, dynamic> e) => Category.fromJson(e)).toList() as M;
		}
		if(<Product>[] is M){
			return data.map<Product>((Map<String, dynamic> e) => Product.fromJson(e)).toList() as M;
		}
		if(<LoginParams>[] is M){
			return data.map<LoginParams>((Map<String, dynamic> e) => LoginParams.fromJson(e)).toList() as M;
		}
		if(<UserEntity>[] is M){
			return data.map<UserEntity>((Map<String, dynamic> e) => UserEntity.fromJson(e)).toList() as M;
		}
		if(<CategoryEntity>[] is M){
			return data.map<CategoryEntity>((Map<String, dynamic> e) => CategoryEntity.fromJson(e)).toList() as M;
		}
		if(<CategoryData>[] is M){
			return data.map<CategoryData>((Map<String, dynamic> e) => CategoryData.fromJson(e)).toList() as M;
		}
		if(<CategoryModelEntity>[] is M){
			return data.map<CategoryModelEntity>((Map<String, dynamic> e) => CategoryModelEntity.fromJson(e)).toList() as M;
		}
		if(<CategoryModelData>[] is M){
			return data.map<CategoryModelData>((Map<String, dynamic> e) => CategoryModelData.fromJson(e)).toList() as M;
		}
		if(<CategoryFilterEntity>[] is M){
			return data.map<CategoryFilterEntity>((Map<String, dynamic> e) => CategoryFilterEntity.fromJson(e)).toList() as M;
		}
		if(<CategoryFilterData>[] is M){
			return data.map<CategoryFilterData>((Map<String, dynamic> e) => CategoryFilterData.fromJson(e)).toList() as M;
		}
		if(<CategoryFilterDataDramaFilterItemList>[] is M){
			return data.map<CategoryFilterDataDramaFilterItemList>((Map<String, dynamic> e) => CategoryFilterDataDramaFilterItemList.fromJson(e)).toList() as M;
		}
		if(<CategoryListEntity>[] is M){
			return data.map<CategoryListEntity>((Map<String, dynamic> e) => CategoryListEntity.fromJson(e)).toList() as M;
		}
		if(<CategoryListData>[] is M){
			return data.map<CategoryListData>((Map<String, dynamic> e) => CategoryListData.fromJson(e)).toList() as M;
		}
		if(<GoodLookEntity>[] is M){
			return data.map<GoodLookEntity>((Map<String, dynamic> e) => GoodLookEntity.fromJson(e)).toList() as M;
		}
		if(<GoodLookData>[] is M){
			return data.map<GoodLookData>((Map<String, dynamic> e) => GoodLookData.fromJson(e)).toList() as M;
		}
		if(<GoodLookDataResponse>[] is M){
			return data.map<GoodLookDataResponse>((Map<String, dynamic> e) => GoodLookDataResponse.fromJson(e)).toList() as M;
		}
		if(<GoodLookDataResponsePageData>[] is M){
			return data.map<GoodLookDataResponsePageData>((Map<String, dynamic> e) => GoodLookDataResponsePageData.fromJson(e)).toList() as M;
		}
		if(<IndexInfoEntity>[] is M){
			return data.map<IndexInfoEntity>((Map<String, dynamic> e) => IndexInfoEntity.fromJson(e)).toList() as M;
		}
		if(<IndexInfoData>[] is M){
			return data.map<IndexInfoData>((Map<String, dynamic> e) => IndexInfoData.fromJson(e)).toList() as M;
		}
		if(<IndexInfoDataDrama>[] is M){
			return data.map<IndexInfoDataDrama>((Map<String, dynamic> e) => IndexInfoDataDrama.fromJson(e)).toList() as M;
		}
		if(<IndexInfoDataEpisodeList>[] is M){
			return data.map<IndexInfoDataEpisodeList>((Map<String, dynamic> e) => IndexInfoDataEpisodeList.fromJson(e)).toList() as M;
		}
		if(<IndexInfoDataPlayInfo>[] is M){
			return data.map<IndexInfoDataPlayInfo>((Map<String, dynamic> e) => IndexInfoDataPlayInfo.fromJson(e)).toList() as M;
		}
		if(<IndexInfoDataQualityList>[] is M){
			return data.map<IndexInfoDataQualityList>((Map<String, dynamic> e) => IndexInfoDataQualityList.fromJson(e)).toList() as M;
		}
		if(<IndexResponseEntity>[] is M){
			return data.map<IndexResponseEntity>((Map<String, dynamic> e) => IndexResponseEntity.fromJson(e)).toList() as M;
		}
		if(<IndexResponseData>[] is M){
			return data.map<IndexResponseData>((Map<String, dynamic> e) => IndexResponseData.fromJson(e)).toList() as M;
		}
		if(<IndexResponseDataTop>[] is M){
			return data.map<IndexResponseDataTop>((Map<String, dynamic> e) => IndexResponseDataTop.fromJson(e)).toList() as M;
		}
		if(<IndexResponseDataTopEye>[] is M){
			return data.map<IndexResponseDataTopEye>((Map<String, dynamic> e) => IndexResponseDataTopEye.fromJson(e)).toList() as M;
		}
		if(<IndexResponseDataTopGuide>[] is M){
			return data.map<IndexResponseDataTopGuide>((Map<String, dynamic> e) => IndexResponseDataTopGuide.fromJson(e)).toList() as M;
		}
		if(<IndexResponseDataSections>[] is M){
			return data.map<IndexResponseDataSections>((Map<String, dynamic> e) => IndexResponseDataSections.fromJson(e)).toList() as M;
		}
		if(<IndexResponseDataSectionsSectionContents>[] is M){
			return data.map<IndexResponseDataSectionsSectionContents>((Map<String, dynamic> e) => IndexResponseDataSectionsSectionContents.fromJson(e)).toList() as M;
		}

		debugPrint("${M.toString()} not found");
	
		return null;
}

	static M? fromJsonAsT<M>(dynamic json) {
		if (json is List) {
			return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
		} else {
			return jsonConvert.convert<M>(json);
		}
	}
}